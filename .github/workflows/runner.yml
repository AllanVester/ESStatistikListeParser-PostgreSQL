name: Runner (New)

on:
  workflow_dispatch:
    inputs:
      previous-filename-no-suffix:
        description: 'Previous ESStatistikListeModtag Filename (No Suffix)'
        required: true
        type: string
      filename-no-suffix:
        description: 'ESStatistikListeModtag Filename (No Suffix)'
        required: true
        type: string
      discord-upload-limit:
        description: 'Discord Upload Limit (In MiB)'
        required: true
        type: string
      github-upload-limit:
        description: 'GitHub Upload Limit (In MiB)'
        required: true
        type: string
      worker-count:
        description: 'PostgreSQL - Worker Count'
        required: true
        type: string
      start-count:
        description: 'PostgreSQL - Start Count'
        required: true
        type: string
      step-count:
        description: 'PostgreSQL - Step Count'
        required: true
        type: string
      runner-number:
        description: 'PostgreSQL - Runner Number State'
        required: true
        type: string

jobs:
  mysql:
    name: Run PostgreSQL
    runs-on: ubuntu-latest
    steps:
      - name: Display runner information
        run: |
          echo "cpu-core:       $(nproc --all)"
          echo "cpu-model:      $(grep 'model name' /proc/cpuinfo | head -1 | cut -d: -f2- | sed 's/^[[:space:]]*//')"
          echo "hostname:       $(hostname)"
          echo "kernel-release: $(uname -r)"
          echo "kernel-version: $(uname -v)"
          echo "name:           $(grep '^NAME=' /etc/os-release | head -1 | cut -d= -f2- | tr -d '\"')"
          echo "platform:       $(uname -s)"
          echo "release:        $(grep '^VERSION_ID=' /etc/os-release | head -1 | cut -d= -f2- | tr -d '\"')"
          echo "total-memory:   $(grep MemTotal /proc/meminfo | awk '{print $2 * 1024}')"

      - name: Set environment variables
        run: |
          echo "PREV_RUNNER=$(( ${{ inputs.runner-number }} - 1 ))" >> $GITHUB_ENV
          echo "NEXT_RUNNER=$(( ${{ inputs.runner-number }} + 1 ))" >> $GITHUB_ENV
          echo "NEXT_START_COUNT=$(( ${{ inputs.start-count }} + ${{ inputs.step-count }} ))" >> $GITHUB_ENV
          echo "NEXT_STEP_COUNT=$(( ${{ inputs.step-count }} - 500000 ))" >> $GITHUB_ENV
          echo "XML_PARSE_COMPLETE=false" >> $GITHUB_ENV
          
      # - name: Maximize build space
      #   uses: AdityaGarg8/remove-unwanted-software@v5
      #   with:
      #     remove-dotnet: "true"
      #     remove-android: "true"
      #     remove-haskell: "true"
      #     remove-codeql: "true"
      #     remove-docker-images: "true"
      #     remove-cached-tools: "true"
      #     remove-swapfile: "true"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/ESStatistikListeParser-GitHub"
          ref: "main"
          path: "${{ github.workspace }}/"
          sparse-checkout: |
            /Bilgaden-PostgreSQL.sql
            /Branch-GitHub.py
            /go.mod
            /go.sum
            /PostgreSQL-GitHub.go
            /UploadToDiscord-GitHub.py
          sparse-checkout-cone-mode: false
          token: "${{ secrets.PAT }}"

      - name: Checkout ESStatistikListeModtag repository
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ inputs.filename-no-suffix }}"
          ref: "main"
          path: "${{ github.workspace }}/temp/"
          sparse-checkout: |
            /ESStatistikListeModtag
          sparse-checkout-cone-mode: false
          token: "${{ secrets.PAT }}"

      - name: Set up PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: 18
          database: runner
        
      - name: Import schema into PostgreSQL
        run: |
          psql -f Bilgaden-PostgreSQL.sql
          psql -U runner -d bilgaden -c "GRANT USAGE ON SCHEMA bilgaden TO runner;"
          psql -U runner -d bilgaden -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA bilgaden TO runner;"
          psql -U runner -d bilgaden -c "ALTER DEFAULT PRIVILEGES IN SCHEMA bilgaden GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO runner;"
          psql -U runner -d bilgaden -c "ALTER ROLE runner SET search_path = bilgaden, public;"
          psql -U runner -d bilgaden -c "SELECT table_schema, table_name FROM information_schema.tables WHERE table_schema='bilgaden' ORDER BY table_name;"
          psql -U runner -d bilgaden -c "SELECT current_database(), current_schema();"
          psql -U runner -d bilgaden -c "SELECT to_regclass('bilgaden.koeretoej');"

      # - name: Tune PostgreSQL buffer pool size
      #   run: |
      #     /usr/bin/mariadb -e "SET GLOBAL innodb_buffer_pool_size = 14 * 1024 * 1024 * 1024;"

      - name: Stitch ESStatistikListeModtag back together
        run: |
          cat ${{ github.workspace }}/temp/ESStatistikListeModtag/*.part* > "${{ github.workspace }}/${{ inputs.filename-no-suffix }}.zip"
          file "${{ github.workspace }}/${{ inputs.filename-no-suffix }}.zip"
          
          rm -rf ${{ github.workspace }}/temp/

      # - name: Checkout ESStatistikListeModtag repository (PostgreSQL-branch)
      #   uses: actions/checkout@v4
      #   with:
      #     repository: "${{ github.repository_owner }}/${{ inputs.filename-no-suffix }}"
      #     ref: "mysql"
      #     path: "${{ github.workspace }}/temp/"
      #     sparse-checkout: |
      #       !/*
      #     sparse-checkout-cone-mode: false
      #     token: "${{ secrets.PAT }}"

      # - name: Set up Git for temporary files
      #   working-directory: "${{ github.workspace }}/temp/"
      #   run: |
      #     gh auth login --with-token <<< "${{ secrets.PAT }}"

      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --global http.postBuffer 104857600
          
      #     if git ls-remote --exit-code --heads origin mysql-temp-${{ inputs.runner-number }}; then
      #         echo "Branch 'mysql-temp-${{ inputs.runner-number }}' already exists, deleting and recreating..."
              
      #         if git show-ref --verify --quiet refs/heads/mysql-temp-${{ inputs.runner-number }}; then
      #             git branch -D mysql-temp-${{ inputs.runner-number }}
      #         fi
      #         git push origin --delete mysql-temp-${{ inputs.runner-number }}
      #         git checkout -b mysql-temp-${{ inputs.runner-number }}
      #     else
      #         echo "Branch 'mysql-temp-${{ inputs.runner-number }}' does not exist, creating..."
              
      #         git checkout -b mysql-temp-${{ inputs.runner-number }}
      #     fi

      #     git push -u origin mysql-temp-${{ inputs.runner-number }}

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Install Go dependencies
        run: |
          go mod tidy # go mod download

      - name: Run PostgreSQL Go script
        run: |
          go run ${{ github.workspace }}/PostgreSQL-GitHub.go

          rm -f "${{ github.workspace }}/${{ inputs.filename-no-suffix }}.zip"
        env:
          NUMBER_OF_WORKERS: ${{ inputs.worker-count }}
          START_COUNT: ${{ inputs.start-count }}
          END_COUNT: ${{ env.NEXT_START_COUNT }}

      # - name: Dump the entire database
      #   run: |
      #     /usr/bin/mariadb-dump --no-create-db --databases bilgaden | gzip > ${{ github.workspace }}/bilgaden.sql.gz
    
      # - name: Split SQL-file into temp-directory
      #   run: |
      #     split -d -b ${{ inputs.github-upload-limit }}m ${{ github.workspace }}/bilgaden.sql.gz ${{ github.workspace }}/temp/${{ inputs.filename-no-suffix }}.sql.gz.part

      # - name: Upload SQL-file to GitHub PostgreSQL-temp-branch
      #   working-directory: "${{ github.workspace }}/temp/"
      #   run: |
      #     git add --sparse .
      #     git commit -m "Uploaded mysql-temp-${{ inputs.runner-number }}"
      #     git push

      # - name: Trigger next Runner
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       await github.rest.actions.createWorkflowDispatch({
      #         owner: context.repo.owner,
      #         repo: 'ESStatistikListeParser-Runner',
      #         workflow_id: 'runner-mysql.yml',
      #         ref: 'main',
      #         inputs: {
      #           'filename-no-suffix': '${{ inputs.filename-no-suffix }}',
      #           'discord-upload-limit': '${{ inputs.discord-upload-limit }}',
      #           'github-upload-limit': '${{ inputs.github-upload-limit }}',
      #           'worker-count': '${{ inputs.worker-count }}',
      #           'start-count': '${{ env.NEXT_START_COUNT }}',
      #           'step-count': '${{ env.NEXT_STEP_COUNT }}',
      #           'runner-number': '${{ env.NEXT_RUNNER }}'
      #         }
      #       })
      #     github-token: ${{ secrets.PAT }}
